// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blurb.proto

/*
Package blurb is a generated protocol buffer package.

It is generated from these files:
	blurb.proto

It has these top-level messages:
	FeedParameters
	Blurb
	Blurbs
	BlurbIndex
	NewBlurb
*/
package blurb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/adamsanghera/blurber-protobufs/dist/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FeedParameters struct {
	RequestorID *common.UserID   `protobuf:"bytes,1,opt,name=RequestorID" json:"RequestorID,omitempty"`
	LeaderIDs   []*common.UserID `protobuf:"bytes,2,rep,name=LeaderIDs" json:"LeaderIDs,omitempty"`
}

func (m *FeedParameters) Reset()                    { *m = FeedParameters{} }
func (m *FeedParameters) String() string            { return proto.CompactTextString(m) }
func (*FeedParameters) ProtoMessage()               {}
func (*FeedParameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FeedParameters) GetRequestorID() *common.UserID {
	if m != nil {
		return m.RequestorID
	}
	return nil
}

func (m *FeedParameters) GetLeaderIDs() []*common.UserID {
	if m != nil {
		return m.LeaderIDs
	}
	return nil
}

type Blurb struct {
	Content     string `protobuf:"bytes,1,opt,name=Content" json:"Content,omitempty"`
	Timestamp   string `protobuf:"bytes,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	UnixTime    int64  `protobuf:"varint,3,opt,name=UnixTime" json:"UnixTime,omitempty"`
	BlurbID     int32  `protobuf:"varint,4,opt,name=BlurbID" json:"BlurbID,omitempty"`
	CreatorName string `protobuf:"bytes,5,opt,name=CreatorName" json:"CreatorName,omitempty"`
}

func (m *Blurb) Reset()                    { *m = Blurb{} }
func (m *Blurb) String() string            { return proto.CompactTextString(m) }
func (*Blurb) ProtoMessage()               {}
func (*Blurb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Blurb) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Blurb) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Blurb) GetUnixTime() int64 {
	if m != nil {
		return m.UnixTime
	}
	return 0
}

func (m *Blurb) GetBlurbID() int32 {
	if m != nil {
		return m.BlurbID
	}
	return 0
}

func (m *Blurb) GetCreatorName() string {
	if m != nil {
		return m.CreatorName
	}
	return ""
}

type Blurbs struct {
	Blurbs []*Blurb `protobuf:"bytes,1,rep,name=Blurbs" json:"Blurbs,omitempty"`
}

func (m *Blurbs) Reset()                    { *m = Blurbs{} }
func (m *Blurbs) String() string            { return proto.CompactTextString(m) }
func (*Blurbs) ProtoMessage()               {}
func (*Blurbs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Blurbs) GetBlurbs() []*Blurb {
	if m != nil {
		return m.Blurbs
	}
	return nil
}

type BlurbIndex struct {
	Author  *common.UserID `protobuf:"bytes,1,opt,name=Author" json:"Author,omitempty"`
	BlurbID int32          `protobuf:"varint,2,opt,name=BlurbID" json:"BlurbID,omitempty"`
}

func (m *BlurbIndex) Reset()                    { *m = BlurbIndex{} }
func (m *BlurbIndex) String() string            { return proto.CompactTextString(m) }
func (*BlurbIndex) ProtoMessage()               {}
func (*BlurbIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlurbIndex) GetAuthor() *common.UserID {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *BlurbIndex) GetBlurbID() int32 {
	if m != nil {
		return m.BlurbID
	}
	return 0
}

type NewBlurb struct {
	Author   *common.UserID `protobuf:"bytes,1,opt,name=Author" json:"Author,omitempty"`
	Content  string         `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	Username string         `protobuf:"bytes,3,opt,name=Username" json:"Username,omitempty"`
}

func (m *NewBlurb) Reset()                    { *m = NewBlurb{} }
func (m *NewBlurb) String() string            { return proto.CompactTextString(m) }
func (*NewBlurb) ProtoMessage()               {}
func (*NewBlurb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewBlurb) GetAuthor() *common.UserID {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *NewBlurb) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewBlurb) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*FeedParameters)(nil), "FeedParameters")
	proto.RegisterType((*Blurb)(nil), "Blurb")
	proto.RegisterType((*Blurbs)(nil), "Blurbs")
	proto.RegisterType((*BlurbIndex)(nil), "BlurbIndex")
	proto.RegisterType((*NewBlurb)(nil), "NewBlurb")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlurbDB service

type BlurbDBClient interface {
	Delete(ctx context.Context, in *BlurbIndex, opts ...grpc.CallOption) (*common.Empty, error)
	Add(ctx context.Context, in *NewBlurb, opts ...grpc.CallOption) (*common.Empty, error)
	GenerateFeed(ctx context.Context, in *FeedParameters, opts ...grpc.CallOption) (*Blurbs, error)
	GetRecentBy(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*Blurbs, error)
	DeleteHistoryOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*common.Empty, error)
	InvalidateFeedCache(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*common.Empty, error)
}

type blurbDBClient struct {
	cc *grpc.ClientConn
}

func NewBlurbDBClient(cc *grpc.ClientConn) BlurbDBClient {
	return &blurbDBClient{cc}
}

func (c *blurbDBClient) Delete(ctx context.Context, in *BlurbIndex, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/BlurbDB/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blurbDBClient) Add(ctx context.Context, in *NewBlurb, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/BlurbDB/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blurbDBClient) GenerateFeed(ctx context.Context, in *FeedParameters, opts ...grpc.CallOption) (*Blurbs, error) {
	out := new(Blurbs)
	err := grpc.Invoke(ctx, "/BlurbDB/GenerateFeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blurbDBClient) GetRecentBy(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*Blurbs, error) {
	out := new(Blurbs)
	err := grpc.Invoke(ctx, "/BlurbDB/GetRecentBy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blurbDBClient) DeleteHistoryOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/BlurbDB/DeleteHistoryOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blurbDBClient) InvalidateFeedCache(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/BlurbDB/InvalidateFeedCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlurbDB service

type BlurbDBServer interface {
	Delete(context.Context, *BlurbIndex) (*common.Empty, error)
	Add(context.Context, *NewBlurb) (*common.Empty, error)
	GenerateFeed(context.Context, *FeedParameters) (*Blurbs, error)
	GetRecentBy(context.Context, *common.UserID) (*Blurbs, error)
	DeleteHistoryOf(context.Context, *common.UserID) (*common.Empty, error)
	InvalidateFeedCache(context.Context, *common.UserID) (*common.Empty, error)
}

func RegisterBlurbDBServer(s *grpc.Server, srv BlurbDBServer) {
	s.RegisterService(&_BlurbDB_serviceDesc, srv)
}

func _BlurbDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlurbIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlurbDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlurbDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlurbDBServer).Delete(ctx, req.(*BlurbIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlurbDB_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBlurb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlurbDBServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlurbDB/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlurbDBServer).Add(ctx, req.(*NewBlurb))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlurbDB_GenerateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlurbDBServer).GenerateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlurbDB/GenerateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlurbDBServer).GenerateFeed(ctx, req.(*FeedParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlurbDB_GetRecentBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlurbDBServer).GetRecentBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlurbDB/GetRecentBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlurbDBServer).GetRecentBy(ctx, req.(*common.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlurbDB_DeleteHistoryOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlurbDBServer).DeleteHistoryOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlurbDB/DeleteHistoryOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlurbDBServer).DeleteHistoryOf(ctx, req.(*common.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlurbDB_InvalidateFeedCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlurbDBServer).InvalidateFeedCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlurbDB/InvalidateFeedCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlurbDBServer).InvalidateFeedCache(ctx, req.(*common.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlurbDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BlurbDB",
	HandlerType: (*BlurbDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _BlurbDB_Delete_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _BlurbDB_Add_Handler,
		},
		{
			MethodName: "GenerateFeed",
			Handler:    _BlurbDB_GenerateFeed_Handler,
		},
		{
			MethodName: "GetRecentBy",
			Handler:    _BlurbDB_GetRecentBy_Handler,
		},
		{
			MethodName: "DeleteHistoryOf",
			Handler:    _BlurbDB_DeleteHistoryOf_Handler,
		},
		{
			MethodName: "InvalidateFeedCache",
			Handler:    _BlurbDB_InvalidateFeedCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blurb.proto",
}

func init() { proto.RegisterFile("blurb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xd1, 0x8e, 0x93, 0x40,
	0x14, 0x0d, 0x60, 0xe9, 0x72, 0xd9, 0xb8, 0xc9, 0xf8, 0x32, 0x21, 0xea, 0x12, 0x12, 0x0d, 0xbe,
	0xcc, 0xc3, 0xfa, 0x05, 0xdb, 0xa2, 0x95, 0xc4, 0x54, 0x33, 0xb1, 0x1f, 0x30, 0x94, 0x6b, 0x4a,
	0x52, 0x66, 0xea, 0x30, 0xd5, 0xf6, 0x4b, 0xfc, 0x36, 0xff, 0xc6, 0x30, 0x40, 0xa1, 0xfa, 0xb2,
	0x6f, 0x73, 0xee, 0x39, 0x39, 0x73, 0xee, 0xc9, 0x85, 0xb0, 0xd8, 0x1f, 0x75, 0xc1, 0x0e, 0x5a,
	0x19, 0x15, 0xdd, 0x6e, 0x55, 0x5d, 0x2b, 0xd9, 0xa1, 0xa4, 0x80, 0xe7, 0x1f, 0x11, 0xcb, 0xaf,
	0x42, 0x8b, 0x1a, 0x0d, 0xea, 0x86, 0xbc, 0x83, 0x90, 0xe3, 0x8f, 0x23, 0x36, 0x46, 0xe9, 0x3c,
	0xa3, 0x4e, 0xec, 0xa4, 0xe1, 0xc3, 0x9c, 0x6d, 0x1a, 0xd4, 0x79, 0xc6, 0xa7, 0x1c, 0x79, 0x03,
	0xc1, 0x67, 0x14, 0x65, 0x4b, 0x34, 0xd4, 0x8d, 0xbd, 0xa9, 0x70, 0x64, 0x92, 0xdf, 0x0e, 0xcc,
	0x16, 0x6d, 0x02, 0x42, 0x61, 0xbe, 0x54, 0xd2, 0xa0, 0x34, 0xd6, 0x37, 0xe0, 0x03, 0x24, 0x2f,
	0x21, 0xf8, 0x56, 0xd5, 0xd8, 0x18, 0x51, 0x1f, 0xa8, 0x6b, 0xb9, 0x71, 0x40, 0x22, 0xb8, 0xd9,
	0xc8, 0xea, 0xd4, 0x0e, 0xa8, 0x17, 0x3b, 0xa9, 0xc7, 0x2f, 0xb8, 0xf5, 0xb4, 0xe6, 0x79, 0x46,
	0x9f, 0xc5, 0x4e, 0x3a, 0xe3, 0x03, 0x24, 0x31, 0x84, 0x4b, 0x8d, 0xc2, 0x28, 0xbd, 0x16, 0x35,
	0xd2, 0x99, 0x75, 0x9d, 0x8e, 0x92, 0x14, 0x7c, 0x2b, 0x6e, 0xc8, 0xeb, 0xe1, 0x45, 0x1d, 0xbb,
	0x87, 0xcf, 0x2c, 0xe4, 0xfd, 0x34, 0x59, 0x01, 0x74, 0xb6, 0xb2, 0xc4, 0x13, 0xb9, 0x07, 0xff,
	0xf1, 0x68, 0x76, 0x4a, 0xff, 0x5b, 0x4f, 0x3f, 0x9e, 0x86, 0x72, 0xaf, 0x42, 0x25, 0x02, 0x6e,
	0xd6, 0xf8, 0xab, 0xab, 0xe3, 0x29, 0x36, 0x43, 0x5f, 0xee, 0x75, 0x5f, 0x6d, 0x23, 0x0d, 0x6a,
	0x29, 0xfa, 0x46, 0x02, 0x7e, 0xc1, 0x0f, 0x7f, 0x9c, 0xfe, 0xf7, 0x6c, 0x41, 0x5e, 0x81, 0x9f,
	0xe1, 0x1e, 0x0d, 0x92, 0x90, 0x8d, 0x0b, 0x44, 0x3e, 0xfb, 0x50, 0x1f, 0xcc, 0x99, 0x50, 0xf0,
	0x1e, 0xcb, 0x92, 0x04, 0x6c, 0xc8, 0x74, 0x61, 0x52, 0xb8, 0x5d, 0xa1, 0x44, 0x2d, 0x0c, 0xb6,
	0x07, 0x42, 0xee, 0xd8, 0xf5, 0x9d, 0x44, 0x73, 0xd6, 0x57, 0x77, 0x0f, 0xe1, 0x0a, 0x0d, 0xc7,
	0x2d, 0x4a, 0xb3, 0x38, 0x93, 0x61, 0x89, 0x51, 0x90, 0xc0, 0x5d, 0x97, 0xe1, 0x53, 0xd5, 0x1e,
	0xce, 0xf9, 0xcb, 0xf7, 0x51, 0x34, 0x7c, 0xf7, 0x16, 0x5e, 0xe4, 0xf2, 0xa7, 0xd8, 0x57, 0x65,
	0xff, 0xe1, 0x52, 0x6c, 0x77, 0xf8, 0x9f, 0xae, 0xf0, 0xed, 0xd9, 0xbe, 0xff, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0xb1, 0xa9, 0x60, 0x97, 0xd3, 0x02, 0x00, 0x00,
}
