// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscription.proto

/*
Package subscription is a generated protocol buffer package.

It is generated from these files:
	subscription.proto

It has these top-level messages:
	Subscription
	Users
*/
package subscription

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/adamsanghera/blurber-protobufs/dist/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Subscription struct {
	Follower *common.UserID `protobuf:"bytes,1,opt,name=Follower" json:"Follower,omitempty"`
	Leader   *common.UserID `protobuf:"bytes,2,opt,name=Leader" json:"Leader,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Subscription) GetFollower() *common.UserID {
	if m != nil {
		return m.Follower
	}
	return nil
}

func (m *Subscription) GetLeader() *common.UserID {
	if m != nil {
		return m.Leader
	}
	return nil
}

type Users struct {
	Users []*common.UserID `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Users) GetUsers() []*common.UserID {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*Subscription)(nil), "Subscription")
	proto.RegisterType((*Users)(nil), "Users")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SubscriptionDB service

type SubscriptionDBClient interface {
	// Replicated RPCs
	Add(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error)
	Delete(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error)
	DeletePresenceOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*common.Empty, error)
	// Non-replicated RPCs
	GetLeadersOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*Users, error)
	GetFollowersOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*Users, error)
	// Replication Stewardship
	Leader(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.ServerInfo, error)
	PromptViewChange(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error)
}

type subscriptionDBClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionDBClient(cc *grpc.ClientConn) SubscriptionDBClient {
	return &subscriptionDBClient{cc}
}

func (c *subscriptionDBClient) Add(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/SubscriptionDB/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionDBClient) Delete(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/SubscriptionDB/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionDBClient) DeletePresenceOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/SubscriptionDB/DeletePresenceOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionDBClient) GetLeadersOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := grpc.Invoke(ctx, "/SubscriptionDB/GetLeadersOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionDBClient) GetFollowersOf(ctx context.Context, in *common.UserID, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := grpc.Invoke(ctx, "/SubscriptionDB/GetFollowersOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionDBClient) Leader(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.ServerInfo, error) {
	out := new(common.ServerInfo)
	err := grpc.Invoke(ctx, "/SubscriptionDB/Leader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionDBClient) PromptViewChange(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/SubscriptionDB/PromptViewChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubscriptionDB service

type SubscriptionDBServer interface {
	// Replicated RPCs
	Add(context.Context, *Subscription) (*common.Empty, error)
	Delete(context.Context, *Subscription) (*common.Empty, error)
	DeletePresenceOf(context.Context, *common.UserID) (*common.Empty, error)
	// Non-replicated RPCs
	GetLeadersOf(context.Context, *common.UserID) (*Users, error)
	GetFollowersOf(context.Context, *common.UserID) (*Users, error)
	// Replication Stewardship
	Leader(context.Context, *common.Empty) (*common.ServerInfo, error)
	PromptViewChange(context.Context, *common.Empty) (*common.Empty, error)
}

func RegisterSubscriptionDBServer(s *grpc.Server, srv SubscriptionDBServer) {
	s.RegisterService(&_SubscriptionDB_serviceDesc, srv)
}

func _SubscriptionDB_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).Add(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).Delete(ctx, req.(*Subscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionDB_DeletePresenceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).DeletePresenceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/DeletePresenceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).DeletePresenceOf(ctx, req.(*common.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionDB_GetLeadersOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).GetLeadersOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/GetLeadersOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).GetLeadersOf(ctx, req.(*common.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionDB_GetFollowersOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).GetFollowersOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/GetFollowersOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).GetFollowersOf(ctx, req.(*common.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionDB_Leader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).Leader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/Leader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).Leader(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionDB_PromptViewChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionDBServer).PromptViewChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SubscriptionDB/PromptViewChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionDBServer).PromptViewChange(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriptionDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SubscriptionDB",
	HandlerType: (*SubscriptionDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _SubscriptionDB_Add_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubscriptionDB_Delete_Handler,
		},
		{
			MethodName: "DeletePresenceOf",
			Handler:    _SubscriptionDB_DeletePresenceOf_Handler,
		},
		{
			MethodName: "GetLeadersOf",
			Handler:    _SubscriptionDB_GetLeadersOf_Handler,
		},
		{
			MethodName: "GetFollowersOf",
			Handler:    _SubscriptionDB_GetFollowersOf_Handler,
		},
		{
			MethodName: "Leader",
			Handler:    _SubscriptionDB_Leader_Handler,
		},
		{
			MethodName: "PromptViewChange",
			Handler:    _SubscriptionDB_PromptViewChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription.proto",
}

func init() { proto.RegisterFile("subscription.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x89, 0xa5, 0x51, 0xa6, 0xb1, 0x94, 0x39, 0x85, 0x60, 0xb1, 0xa6, 0x20, 0x9e, 0xf6,
	0x50, 0x9f, 0x40, 0x8d, 0x96, 0x82, 0x60, 0xb1, 0xea, 0xbd, 0x4d, 0xa6, 0x1a, 0x48, 0x32, 0x61,
	0x76, 0x6b, 0xf1, 0xd9, 0xbd, 0x48, 0x4c, 0x52, 0x36, 0xa0, 0xa7, 0xdd, 0xfd, 0xf6, 0x63, 0xfe,
	0xd9, 0x1d, 0x40, 0xbd, 0xdb, 0xe8, 0x58, 0xd2, 0xd2, 0xa4, 0x5c, 0xa8, 0x52, 0xd8, 0x70, 0xe0,
	0xc5, 0x9c, 0xe7, 0xed, 0x29, 0x7c, 0x01, 0x6f, 0x65, 0x39, 0x38, 0x85, 0x93, 0x07, 0xce, 0x32,
	0xde, 0x93, 0xf8, 0xce, 0xc4, 0xb9, 0x1a, 0xcc, 0x8e, 0xd5, 0xab, 0x26, 0x59, 0x44, 0xcf, 0x87,
	0x0b, 0x3c, 0x07, 0xf7, 0x91, 0xd6, 0x09, 0x89, 0x7f, 0xd4, 0x55, 0x1a, 0x1c, 0x5e, 0x42, 0xbf,
	0x22, 0x1a, 0xc7, 0xd0, 0xdf, 0x55, 0x1b, 0xdf, 0x99, 0xf4, 0x6c, 0xb1, 0xa6, 0xb3, 0x6f, 0x07,
	0x86, 0x76, 0x7c, 0x74, 0x8b, 0x67, 0xd0, 0xbb, 0x49, 0x12, 0x3c, 0x55, 0x36, 0x0f, 0x5c, 0x75,
	0x9f, 0x97, 0xe6, 0xab, 0x4a, 0x8e, 0x28, 0x23, 0x43, 0xff, 0x09, 0x53, 0x18, 0xd5, 0xc2, 0x52,
	0x48, 0x53, 0x11, 0xd3, 0xd3, 0x16, 0xdb, 0x54, 0xab, 0x8a, 0x37, 0x27, 0x53, 0xf7, 0xaa, 0xbb,
	0x42, 0xdd, 0xf6, 0x05, 0x0c, 0xe7, 0x64, 0xda, 0xf7, 0xfe, 0xa9, 0x8c, 0xdb, 0x3f, 0xc0, 0xa6,
	0x6a, 0x30, 0x50, 0x2b, 0x92, 0x4f, 0x92, 0x45, 0xb1, 0x65, 0x0c, 0x61, 0xb4, 0x14, 0xce, 0x4b,
	0xf3, 0x96, 0xd2, 0xfe, 0xee, 0x63, 0x5d, 0xbc, 0xd3, 0x41, 0x6c, 0xd6, 0x8d, 0xfb, 0x3b, 0x82,
	0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xa1, 0x1f, 0x30, 0xa6, 0x01, 0x00, 0x00,
}
