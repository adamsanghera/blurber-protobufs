// Code generated by protoc-gen-go. DO NOT EDIT.
// source: replication.proto

/*
Package replication is a generated protocol buffer package.

It is generated from these files:
	replication.proto

It has these top-level messages:
	Command
	ReplicateReply
	PrepareArgs
	PrepareReply
	VCArgs
	VCReply
	SVArgs
	SVReply
	RecoveryArgs
	RecoveryReply
*/
package replication

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command struct {
	Cmd *google_protobuf.Any `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetCmd() *google_protobuf.Any {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type ReplicateReply struct {
	Index   int32 `protobuf:"varint,1,opt,name=Index" json:"Index,omitempty"`
	View    int32 `protobuf:"varint,2,opt,name=View" json:"View,omitempty"`
	Success bool  `protobuf:"varint,3,opt,name=Success" json:"Success,omitempty"`
}

func (m *ReplicateReply) Reset()                    { *m = ReplicateReply{} }
func (m *ReplicateReply) String() string            { return proto.CompactTextString(m) }
func (*ReplicateReply) ProtoMessage()               {}
func (*ReplicateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReplicateReply) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReplicateReply) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ReplicateReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type PrepareArgs struct {
	View          int32    `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	PrimaryCommit int32    `protobuf:"varint,2,opt,name=PrimaryCommit" json:"PrimaryCommit,omitempty"`
	Index         int32    `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`
	Entry         *Command `protobuf:"bytes,4,opt,name=Entry" json:"Entry,omitempty"`
}

func (m *PrepareArgs) Reset()                    { *m = PrepareArgs{} }
func (m *PrepareArgs) String() string            { return proto.CompactTextString(m) }
func (*PrepareArgs) ProtoMessage()               {}
func (*PrepareArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PrepareArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareArgs) GetPrimaryCommit() int32 {
	if m != nil {
		return m.PrimaryCommit
	}
	return 0
}

func (m *PrepareArgs) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PrepareArgs) GetEntry() *Command {
	if m != nil {
		return m.Entry
	}
	return nil
}

type PrepareReply struct {
	View    int32 `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *PrepareReply) Reset()                    { *m = PrepareReply{} }
func (m *PrepareReply) String() string            { return proto.CompactTextString(m) }
func (*PrepareReply) ProtoMessage()               {}
func (*PrepareReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PrepareReply) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *PrepareReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VCArgs struct {
	View int32 `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
}

func (m *VCArgs) Reset()                    { *m = VCArgs{} }
func (m *VCArgs) String() string            { return proto.CompactTextString(m) }
func (*VCArgs) ProtoMessage()               {}
func (*VCArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VCArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

type VCReply struct {
	LastNormalView int32      `protobuf:"varint,1,opt,name=LastNormalView" json:"LastNormalView,omitempty"`
	Log            []*Command `protobuf:"bytes,2,rep,name=Log" json:"Log,omitempty"`
	Success        bool       `protobuf:"varint,3,opt,name=Success" json:"Success,omitempty"`
}

func (m *VCReply) Reset()                    { *m = VCReply{} }
func (m *VCReply) String() string            { return proto.CompactTextString(m) }
func (*VCReply) ProtoMessage()               {}
func (*VCReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VCReply) GetLastNormalView() int32 {
	if m != nil {
		return m.LastNormalView
	}
	return 0
}

func (m *VCReply) GetLog() []*Command {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *VCReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type SVArgs struct {
	View int32      `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Log  []*Command `protobuf:"bytes,2,rep,name=Log" json:"Log,omitempty"`
}

func (m *SVArgs) Reset()                    { *m = SVArgs{} }
func (m *SVArgs) String() string            { return proto.CompactTextString(m) }
func (*SVArgs) ProtoMessage()               {}
func (*SVArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SVArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *SVArgs) GetLog() []*Command {
	if m != nil {
		return m.Log
	}
	return nil
}

type SVReply struct {
}

func (m *SVReply) Reset()                    { *m = SVReply{} }
func (m *SVReply) String() string            { return proto.CompactTextString(m) }
func (*SVReply) ProtoMessage()               {}
func (*SVReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type RecoveryArgs struct {
	View    int32  `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Server  int32  `protobuf:"varint,2,opt,name=Server" json:"Server,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=Address" json:"Address,omitempty"`
}

func (m *RecoveryArgs) Reset()                    { *m = RecoveryArgs{} }
func (m *RecoveryArgs) String() string            { return proto.CompactTextString(m) }
func (*RecoveryArgs) ProtoMessage()               {}
func (*RecoveryArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RecoveryArgs) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RecoveryArgs) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *RecoveryArgs) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RecoveryReply struct {
	View          int32      `protobuf:"varint,1,opt,name=View" json:"View,omitempty"`
	Entries       []*Command `protobuf:"bytes,2,rep,name=Entries" json:"Entries,omitempty"`
	PrimaryCommit int32      `protobuf:"varint,3,opt,name=PrimaryCommit" json:"PrimaryCommit,omitempty"`
	Success       bool       `protobuf:"varint,4,opt,name=Success" json:"Success,omitempty"`
	Peers         []string   `protobuf:"bytes,5,rep,name=Peers" json:"Peers,omitempty"`
}

func (m *RecoveryReply) Reset()                    { *m = RecoveryReply{} }
func (m *RecoveryReply) String() string            { return proto.CompactTextString(m) }
func (*RecoveryReply) ProtoMessage()               {}
func (*RecoveryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RecoveryReply) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RecoveryReply) GetEntries() []*Command {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *RecoveryReply) GetPrimaryCommit() int32 {
	if m != nil {
		return m.PrimaryCommit
	}
	return 0
}

func (m *RecoveryReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RecoveryReply) GetPeers() []string {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*Command)(nil), "Command")
	proto.RegisterType((*ReplicateReply)(nil), "ReplicateReply")
	proto.RegisterType((*PrepareArgs)(nil), "PrepareArgs")
	proto.RegisterType((*PrepareReply)(nil), "PrepareReply")
	proto.RegisterType((*VCArgs)(nil), "VCArgs")
	proto.RegisterType((*VCReply)(nil), "VCReply")
	proto.RegisterType((*SVArgs)(nil), "SVArgs")
	proto.RegisterType((*SVReply)(nil), "SVReply")
	proto.RegisterType((*RecoveryArgs)(nil), "RecoveryArgs")
	proto.RegisterType((*RecoveryReply)(nil), "RecoveryReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Replication service

type ReplicationClient interface {
	// External API
	Replicate(ctx context.Context, in *Command, opts ...grpc.CallOption) (*ReplicateReply, error)
	// Internal API
	Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error)
	Recovery(ctx context.Context, in *RecoveryArgs, opts ...grpc.CallOption) (*RecoveryReply, error)
	ViewChange(ctx context.Context, in *VCArgs, opts ...grpc.CallOption) (*VCReply, error)
	StartView(ctx context.Context, in *SVArgs, opts ...grpc.CallOption) (*SVReply, error)
}

type replicationClient struct {
	cc *grpc.ClientConn
}

func NewReplicationClient(cc *grpc.ClientConn) ReplicationClient {
	return &replicationClient{cc}
}

func (c *replicationClient) Replicate(ctx context.Context, in *Command, opts ...grpc.CallOption) (*ReplicateReply, error) {
	out := new(ReplicateReply)
	err := grpc.Invoke(ctx, "/Replication/Replicate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) Prepare(ctx context.Context, in *PrepareArgs, opts ...grpc.CallOption) (*PrepareReply, error) {
	out := new(PrepareReply)
	err := grpc.Invoke(ctx, "/Replication/Prepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) Recovery(ctx context.Context, in *RecoveryArgs, opts ...grpc.CallOption) (*RecoveryReply, error) {
	out := new(RecoveryReply)
	err := grpc.Invoke(ctx, "/Replication/Recovery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) ViewChange(ctx context.Context, in *VCArgs, opts ...grpc.CallOption) (*VCReply, error) {
	out := new(VCReply)
	err := grpc.Invoke(ctx, "/Replication/ViewChange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) StartView(ctx context.Context, in *SVArgs, opts ...grpc.CallOption) (*SVReply, error) {
	out := new(SVReply)
	err := grpc.Invoke(ctx, "/Replication/StartView", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Replication service

type ReplicationServer interface {
	// External API
	Replicate(context.Context, *Command) (*ReplicateReply, error)
	// Internal API
	Prepare(context.Context, *PrepareArgs) (*PrepareReply, error)
	Recovery(context.Context, *RecoveryArgs) (*RecoveryReply, error)
	ViewChange(context.Context, *VCArgs) (*VCReply, error)
	StartView(context.Context, *SVArgs) (*SVReply, error)
}

func RegisterReplicationServer(s *grpc.Server, srv ReplicationServer) {
	s.RegisterService(&_Replication_serviceDesc, srv)
}

func _Replication_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Replicate(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Prepare(ctx, req.(*PrepareArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_Recovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).Recovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication/Recovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).Recovery(ctx, req.(*RecoveryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_ViewChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).ViewChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication/ViewChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).ViewChange(ctx, req.(*VCArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_StartView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SVArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).StartView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Replication/StartView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).StartView(ctx, req.(*SVArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Replication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Replication",
	HandlerType: (*ReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Replicate",
			Handler:    _Replication_Replicate_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Replication_Prepare_Handler,
		},
		{
			MethodName: "Recovery",
			Handler:    _Replication_Recovery_Handler,
		},
		{
			MethodName: "ViewChange",
			Handler:    _Replication_ViewChange_Handler,
		},
		{
			MethodName: "StartView",
			Handler:    _Replication_StartView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replication.proto",
}

func init() { proto.RegisterFile("replication.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0x9b, 0x40,
	0x10, 0x15, 0xc6, 0x36, 0x30, 0xfe, 0xa8, 0xba, 0x8a, 0x2a, 0x8a, 0xaa, 0xd4, 0x5a, 0x55, 0x96,
	0x7b, 0xd9, 0xa8, 0xe9, 0xa5, 0x87, 0x5e, 0x2c, 0xd4, 0x43, 0xa5, 0xa8, 0xb2, 0x96, 0x88, 0xfb,
	0xc6, 0x4c, 0x29, 0x92, 0x61, 0xad, 0x85, 0xa4, 0xe5, 0xd0, 0x9f, 0xd2, 0x1f, 0xd4, 0x7f, 0x15,
	0xc1, 0x82, 0x03, 0x49, 0xc8, 0x6d, 0xdf, 0xec, 0xce, 0xcc, 0x9b, 0x37, 0x6f, 0xe1, 0xb5, 0xc2,
	0xe3, 0x21, 0xd9, 0x8b, 0x22, 0x91, 0x19, 0x3b, 0x2a, 0x59, 0x48, 0xef, 0x6d, 0x2c, 0x65, 0x7c,
	0xc0, 0x8b, 0x1a, 0xdd, 0xdc, 0xfe, 0xbc, 0x10, 0x59, 0xa9, 0xaf, 0xe8, 0x27, 0xb0, 0x7c, 0x99,
	0xa6, 0x22, 0x8b, 0xc8, 0x1a, 0x4c, 0x3f, 0x8d, 0x5c, 0x63, 0x65, 0x6c, 0x66, 0x97, 0x67, 0x4c,
	0xe7, 0xb0, 0x36, 0x87, 0x6d, 0xb3, 0x92, 0x57, 0x0f, 0xe8, 0x35, 0x2c, 0x79, 0xd3, 0x02, 0xab,
	0x43, 0x49, 0xce, 0x60, 0xf2, 0x3d, 0x8b, 0xf0, 0x4f, 0x9d, 0x3b, 0xe1, 0x1a, 0x10, 0x02, 0xe3,
	0x30, 0xc1, 0xdf, 0xee, 0xa8, 0x0e, 0xd6, 0x67, 0xe2, 0x82, 0x15, 0xdc, 0xee, 0xf7, 0x98, 0xe7,
	0xae, 0xb9, 0x32, 0x36, 0x36, 0x6f, 0x21, 0xfd, 0x0b, 0xb3, 0x9d, 0xc2, 0xa3, 0x50, 0xb8, 0x55,
	0x71, 0x7e, 0x4a, 0x36, 0x3a, 0xc9, 0x1f, 0x60, 0xb1, 0x53, 0x49, 0x2a, 0x54, 0x59, 0x51, 0x4e,
	0x8a, 0xa6, 0x72, 0x3f, 0xf8, 0x40, 0xc6, 0xec, 0x92, 0x39, 0x87, 0xc9, 0xb7, 0xac, 0x50, 0xa5,
	0x3b, 0xae, 0xc7, 0xb3, 0x59, 0x33, 0x35, 0xd7, 0x61, 0xfa, 0x15, 0xe6, 0x4d, 0x7b, 0x3d, 0xd2,
	0x73, 0xfd, 0x3b, 0xe4, 0x47, 0x7d, 0xf2, 0xef, 0x60, 0x1a, 0xfa, 0x43, 0xbc, 0x69, 0x0c, 0x56,
	0xe8, 0xeb, 0xb2, 0x6b, 0x58, 0x5e, 0x89, 0xbc, 0xf8, 0x21, 0x55, 0x2a, 0x0e, 0x9d, 0x87, 0x8f,
	0xa2, 0xc4, 0x03, 0xf3, 0x4a, 0xc6, 0xee, 0x68, 0x65, 0xf6, 0xc8, 0x56, 0xc1, 0x17, 0x34, 0xfc,
	0x02, 0xd3, 0x20, 0x1c, 0x94, 0xef, 0x85, 0x9a, 0xd4, 0x01, 0x2b, 0x08, 0x6b, 0x8a, 0xf4, 0x1a,
	0xe6, 0x1c, 0xf7, 0xf2, 0x0e, 0x55, 0x39, 0x58, 0xea, 0x0d, 0x4c, 0x03, 0x54, 0x77, 0xa8, 0x9a,
	0x15, 0x34, 0xa8, 0xa2, 0xb6, 0x8d, 0x22, 0xd5, 0x52, 0x73, 0x78, 0x0b, 0xe9, 0x3f, 0x03, 0x16,
	0x6d, 0xd9, 0x61, 0x85, 0x29, 0x58, 0xd5, 0x3a, 0x12, 0xcc, 0x9f, 0xd0, 0x6c, 0x2f, 0x9e, 0xba,
	0xc0, 0x7c, 0xce, 0x05, 0x1d, 0x91, 0xc6, 0x3d, 0x91, 0x2a, 0x7f, 0xec, 0x10, 0x55, 0xee, 0x4e,
	0x56, 0xe6, 0xc6, 0xe1, 0x1a, 0x5c, 0xfe, 0x37, 0x60, 0xc6, 0x1f, 0x3e, 0x0e, 0x59, 0x83, 0x73,
	0x32, 0x39, 0x39, 0xb1, 0xf0, 0x5e, 0xb1, 0x47, 0xd6, 0x5f, 0x83, 0xd5, 0xf8, 0x86, 0xcc, 0x59,
	0xc7, 0xc0, 0xde, 0x82, 0xf5, 0xfc, 0xf4, 0x11, 0xec, 0x76, 0x7c, 0xb2, 0x60, 0x5d, 0x81, 0xbd,
	0x25, 0xeb, 0x0b, 0xf3, 0x1e, 0xa0, 0x12, 0xc3, 0xff, 0x25, 0xb2, 0x18, 0x89, 0xc5, 0xb4, 0xb3,
	0x3c, 0x9b, 0xb5, 0x26, 0x3a, 0x07, 0x27, 0x28, 0x84, 0x2a, 0x6a, 0xc9, 0x2c, 0xa6, 0x57, 0xee,
	0xd9, 0xac, 0xd9, 0xe0, 0xcd, 0xb4, 0xfe, 0xb3, 0x9f, 0xef, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa0,
	0xee, 0x58, 0x48, 0x0a, 0x04, 0x00, 0x00,
}
